{{- if .Values.postgres.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  serviceName: postgres-headless
  replicas: {{ .Values.postgres.replicaCount }}
  selector:
    matchLabels:
      app: postgres
  {{- if .Values.postgres.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
      spec:
        storageClassName: {{ .Values.postgres.persistence.storageClass }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.postgres.persistence.size }}
  {{- end }}
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: {{ .Values.images.postgres.repository }}:{{ .Values.images.postgres.tag }}
          ports:
            - containerPort: {{ .Values.postgres.service.port }}
          resources:
            {{- toYaml .Values.postgres.resources | nindent 12 }}
          env:
            - name: POSTGRES_DB
              value: {{ .Values.postgres.database }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            {{- if .Values.postgres.persistence.enabled }}
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            {{- end }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "$(POSTGRES_USER)" -d "{{ .Values.postgres.database }}" -h 127.0.0.1 -p {{ .Values.postgres.service.port }}
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "$(POSTGRES_USER)" -d "{{ .Values.postgres.database }}" -h 127.0.0.1 -p {{ .Values.postgres.service.port }}
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
      {{- if not .Values.postgres.persistence.enabled }}
      volumes:
        - name: postgres-data
          emptyDir: {}
      {{- end }}
{{- end }} 